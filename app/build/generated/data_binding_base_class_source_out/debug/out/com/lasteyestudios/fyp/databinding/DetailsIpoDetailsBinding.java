// Generated by view binder compiler. Do not edit!
package com.lasteyestudios.fyp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.lasteyestudios.fyp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DetailsIpoDetailsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView faceValue;

  @NonNull
  public final TextView faceValueText;

  @NonNull
  public final Guideline guideline;

  @NonNull
  public final CardView ipoDetailsCard;

  @NonNull
  public final TextView ipoDetailsText;

  @NonNull
  public final TextView ipoDocs;

  @NonNull
  public final TextView ipoDocsText;

  @NonNull
  public final TextView issueSize;

  @NonNull
  public final TextView issueSizeText;

  @NonNull
  public final TextView issueType;

  @NonNull
  public final TextView issueTypeText;

  @NonNull
  public final TextView listedOn;

  @NonNull
  public final TextView listedOnText;

  @NonNull
  public final TextView lotSize;

  @NonNull
  public final TextView lotSizeText;

  @NonNull
  public final TextView minimumPrice;

  @NonNull
  public final TextView minimumPriceText;

  @NonNull
  public final TextView priceRange;

  @NonNull
  public final TextView priceRangeText;

  private DetailsIpoDetailsBinding(@NonNull ConstraintLayout rootView, @NonNull TextView faceValue,
      @NonNull TextView faceValueText, @NonNull Guideline guideline,
      @NonNull CardView ipoDetailsCard, @NonNull TextView ipoDetailsText, @NonNull TextView ipoDocs,
      @NonNull TextView ipoDocsText, @NonNull TextView issueSize, @NonNull TextView issueSizeText,
      @NonNull TextView issueType, @NonNull TextView issueTypeText, @NonNull TextView listedOn,
      @NonNull TextView listedOnText, @NonNull TextView lotSize, @NonNull TextView lotSizeText,
      @NonNull TextView minimumPrice, @NonNull TextView minimumPriceText,
      @NonNull TextView priceRange, @NonNull TextView priceRangeText) {
    this.rootView = rootView;
    this.faceValue = faceValue;
    this.faceValueText = faceValueText;
    this.guideline = guideline;
    this.ipoDetailsCard = ipoDetailsCard;
    this.ipoDetailsText = ipoDetailsText;
    this.ipoDocs = ipoDocs;
    this.ipoDocsText = ipoDocsText;
    this.issueSize = issueSize;
    this.issueSizeText = issueSizeText;
    this.issueType = issueType;
    this.issueTypeText = issueTypeText;
    this.listedOn = listedOn;
    this.listedOnText = listedOnText;
    this.lotSize = lotSize;
    this.lotSizeText = lotSizeText;
    this.minimumPrice = minimumPrice;
    this.minimumPriceText = minimumPriceText;
    this.priceRange = priceRange;
    this.priceRangeText = priceRangeText;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DetailsIpoDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DetailsIpoDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.details_ipo_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DetailsIpoDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.face_value;
      TextView faceValue = ViewBindings.findChildViewById(rootView, id);
      if (faceValue == null) {
        break missingId;
      }

      id = R.id.face_value_text;
      TextView faceValueText = ViewBindings.findChildViewById(rootView, id);
      if (faceValueText == null) {
        break missingId;
      }

      id = R.id.guideline;
      Guideline guideline = ViewBindings.findChildViewById(rootView, id);
      if (guideline == null) {
        break missingId;
      }

      id = R.id.ipo_details_card;
      CardView ipoDetailsCard = ViewBindings.findChildViewById(rootView, id);
      if (ipoDetailsCard == null) {
        break missingId;
      }

      id = R.id.ipo_details_text;
      TextView ipoDetailsText = ViewBindings.findChildViewById(rootView, id);
      if (ipoDetailsText == null) {
        break missingId;
      }

      id = R.id.ipo_docs;
      TextView ipoDocs = ViewBindings.findChildViewById(rootView, id);
      if (ipoDocs == null) {
        break missingId;
      }

      id = R.id.ipo_docs_text;
      TextView ipoDocsText = ViewBindings.findChildViewById(rootView, id);
      if (ipoDocsText == null) {
        break missingId;
      }

      id = R.id.issue_size;
      TextView issueSize = ViewBindings.findChildViewById(rootView, id);
      if (issueSize == null) {
        break missingId;
      }

      id = R.id.issue_size_text;
      TextView issueSizeText = ViewBindings.findChildViewById(rootView, id);
      if (issueSizeText == null) {
        break missingId;
      }

      id = R.id.issue_type;
      TextView issueType = ViewBindings.findChildViewById(rootView, id);
      if (issueType == null) {
        break missingId;
      }

      id = R.id.issue_type_text;
      TextView issueTypeText = ViewBindings.findChildViewById(rootView, id);
      if (issueTypeText == null) {
        break missingId;
      }

      id = R.id.listed_on;
      TextView listedOn = ViewBindings.findChildViewById(rootView, id);
      if (listedOn == null) {
        break missingId;
      }

      id = R.id.listed_on_text;
      TextView listedOnText = ViewBindings.findChildViewById(rootView, id);
      if (listedOnText == null) {
        break missingId;
      }

      id = R.id.lot_size;
      TextView lotSize = ViewBindings.findChildViewById(rootView, id);
      if (lotSize == null) {
        break missingId;
      }

      id = R.id.lot_size_text;
      TextView lotSizeText = ViewBindings.findChildViewById(rootView, id);
      if (lotSizeText == null) {
        break missingId;
      }

      id = R.id.minimum_price;
      TextView minimumPrice = ViewBindings.findChildViewById(rootView, id);
      if (minimumPrice == null) {
        break missingId;
      }

      id = R.id.minimum_price_text;
      TextView minimumPriceText = ViewBindings.findChildViewById(rootView, id);
      if (minimumPriceText == null) {
        break missingId;
      }

      id = R.id.price_range;
      TextView priceRange = ViewBindings.findChildViewById(rootView, id);
      if (priceRange == null) {
        break missingId;
      }

      id = R.id.price_range_text;
      TextView priceRangeText = ViewBindings.findChildViewById(rootView, id);
      if (priceRangeText == null) {
        break missingId;
      }

      return new DetailsIpoDetailsBinding((ConstraintLayout) rootView, faceValue, faceValueText,
          guideline, ipoDetailsCard, ipoDetailsText, ipoDocs, ipoDocsText, issueSize, issueSizeText,
          issueType, issueTypeText, listedOn, listedOnText, lotSize, lotSizeText, minimumPrice,
          minimumPriceText, priceRange, priceRangeText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
