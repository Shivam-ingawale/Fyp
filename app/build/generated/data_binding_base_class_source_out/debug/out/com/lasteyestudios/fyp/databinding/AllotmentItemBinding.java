// Generated by view binder compiler. Do not edit!
package com.lasteyestudios.fyp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.lasteyestudios.fyp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AllotmentItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CardView allotmentCard;

  @NonNull
  public final TextView closingDate;

  @NonNull
  public final TextView closingDateText;

  @NonNull
  public final TextView companyName;

  @NonNull
  public final TextView faceValue;

  @NonNull
  public final TextView faceValueText;

  @NonNull
  public final Guideline guideline;

  @NonNull
  public final TextView issueSize;

  @NonNull
  public final TextView issueSizeText;

  @NonNull
  public final TextView priceRange;

  @NonNull
  public final TextView priceRangeText;

  @NonNull
  public final TextView secretary;

  @NonNull
  public final TextView secretaryText;

  private AllotmentItemBinding(@NonNull ConstraintLayout rootView, @NonNull CardView allotmentCard,
      @NonNull TextView closingDate, @NonNull TextView closingDateText,
      @NonNull TextView companyName, @NonNull TextView faceValue, @NonNull TextView faceValueText,
      @NonNull Guideline guideline, @NonNull TextView issueSize, @NonNull TextView issueSizeText,
      @NonNull TextView priceRange, @NonNull TextView priceRangeText, @NonNull TextView secretary,
      @NonNull TextView secretaryText) {
    this.rootView = rootView;
    this.allotmentCard = allotmentCard;
    this.closingDate = closingDate;
    this.closingDateText = closingDateText;
    this.companyName = companyName;
    this.faceValue = faceValue;
    this.faceValueText = faceValueText;
    this.guideline = guideline;
    this.issueSize = issueSize;
    this.issueSizeText = issueSizeText;
    this.priceRange = priceRange;
    this.priceRangeText = priceRangeText;
    this.secretary = secretary;
    this.secretaryText = secretaryText;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AllotmentItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AllotmentItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.allotment_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AllotmentItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.allotment_card;
      CardView allotmentCard = ViewBindings.findChildViewById(rootView, id);
      if (allotmentCard == null) {
        break missingId;
      }

      id = R.id.closing_date;
      TextView closingDate = ViewBindings.findChildViewById(rootView, id);
      if (closingDate == null) {
        break missingId;
      }

      id = R.id.closing_date_text;
      TextView closingDateText = ViewBindings.findChildViewById(rootView, id);
      if (closingDateText == null) {
        break missingId;
      }

      id = R.id.company_name;
      TextView companyName = ViewBindings.findChildViewById(rootView, id);
      if (companyName == null) {
        break missingId;
      }

      id = R.id.face_value;
      TextView faceValue = ViewBindings.findChildViewById(rootView, id);
      if (faceValue == null) {
        break missingId;
      }

      id = R.id.face_value_text;
      TextView faceValueText = ViewBindings.findChildViewById(rootView, id);
      if (faceValueText == null) {
        break missingId;
      }

      id = R.id.guideline;
      Guideline guideline = ViewBindings.findChildViewById(rootView, id);
      if (guideline == null) {
        break missingId;
      }

      id = R.id.issue_size;
      TextView issueSize = ViewBindings.findChildViewById(rootView, id);
      if (issueSize == null) {
        break missingId;
      }

      id = R.id.issue_size_text;
      TextView issueSizeText = ViewBindings.findChildViewById(rootView, id);
      if (issueSizeText == null) {
        break missingId;
      }

      id = R.id.price_range;
      TextView priceRange = ViewBindings.findChildViewById(rootView, id);
      if (priceRange == null) {
        break missingId;
      }

      id = R.id.price_range_text;
      TextView priceRangeText = ViewBindings.findChildViewById(rootView, id);
      if (priceRangeText == null) {
        break missingId;
      }

      id = R.id.secretary;
      TextView secretary = ViewBindings.findChildViewById(rootView, id);
      if (secretary == null) {
        break missingId;
      }

      id = R.id.secretary_text;
      TextView secretaryText = ViewBindings.findChildViewById(rootView, id);
      if (secretaryText == null) {
        break missingId;
      }

      return new AllotmentItemBinding((ConstraintLayout) rootView, allotmentCard, closingDate,
          closingDateText, companyName, faceValue, faceValueText, guideline, issueSize,
          issueSizeText, priceRange, priceRangeText, secretary, secretaryText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
